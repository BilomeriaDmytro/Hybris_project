<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Default -->
    <bean id="myextensionSystemSetup" class="training.my.setup.MyextensionSystemSetup">
        <constructor-arg ref="myextensionService"/>
    </bean>

    <bean id="myextensionService" class="training.my.service.impl.DefaultMyextensionService">
        <property name="modelService" ref="modelService"/>
        <property name="mediaService" ref="mediaService"/>
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
    </bean>

    <!-- Repositories -->
    <bean id="orderRepository" class="training.my.repository.OrderRepository">
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
    </bean>

    <bean id="userRepository" class="training.my.repository.UserRepository">
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
    </bean>

    <!-- Services -->
    <bean id="myOrderService" class="training.my.service.impl.MyDefaultOrderService">
        <property name="orderRepository" ref="orderRepository"/>
    </bean>

    <bean id="myUserService" class="training.my.service.impl.MyDefaultUserService">
        <property name="userRepository" ref="userRepository"/>
    </bean>

    <!-- Product data populator -->
    <bean id = "productDataPopulator" class="training.my.facades.populators.productdata.ProductDataPopulator"/>

    <!-- Product data converter -->
    <bean id ="productDataConverter" parent="abstractPopulatingConverter">
        <property name="targetClass" value="de.hybris.platform.commercefacades.product.data.ProductData"/>
        <property name="populators">
            <list merge="true">
                <ref bean="productDataPopulator" />
            </list>
        </property>
    </bean>

    <!-- Facade -->
    <bean id="defaultProductDataFacade" class="training.my.facades.impl.DefaultProductDataFacade">
        <property name="productConverter" ref="productConverter"/>
    </bean>
  
    <!-- Age interceptor for user type -->
    <bean id="ageValidateInterceptor" class="training.my.service.interceptors.user.AgeValidateInterceptor" autowire="byName"/>
    <bean id="ageValidateInterceptorMapping"
          class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
        <property name="interceptor" ref="ageValidateInterceptor"/>
        <property name="typeCode" value="User"/>
    </bean>

    <!-- CartEntryListener -->
    <!--<bean id="addToCartListener" class="training.my.events.addToCartListener" parent="abstractEventListener">
        <property name="modelService" ref="modelService"/>
    </bean>-->
    <bean id="addToCartListener" class="training.my.events.addToCartUpgradedListener" parent="abstractEventListener">
        <property name="modelService" ref="modelService"/>
        <property name="businessProcessService" ref="businessProcessService"/>
    </bean>

    <!-- Process definition -->
    <bean id="addToCartProcessResource" class="de.hybris.platform.processengine.definition.ProcessDefinitionResource">
        <property name="resource" value="classpath:/process/addedToCart.xml"/>
    </bean>

    <!-- Process actions -->
    <import resource="classpath:/process/actions/addedToCart-spring.xml"/>

    <!-- Transactions -->
    <bean id="transactionService" class="training.my.service.impl.DefaultTransactionService"/>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionServiceOperation" expression="execution(* training.my.service.TransactionService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionServiceOperation"/>
    </aop:config>

    <!-- Product cache region -->
    <alias name="defaultProductCacheRegion" alias="productCacheRegion"/>
    <bean name="defaultProductCacheRegion" class="de.hybris.platform.regioncache.region.impl.EHCacheRegion">
        <constructor-arg name="name" value="productCacheRegion" />
        <constructor-arg name="maxEntries" value="30000" />
        <constructor-arg name="evictionPolicy" value="LRU" />
        <property name="handledTypes">
            <array>
                <value>1</value>
            </array>
        </property>
    </bean>
    <bean id="productCacheRegionRegistrar" class="de.hybris.platform.regioncache.region.CacheRegionRegistrar">
        <constructor-arg ref="productCacheRegion"/>
    </bean>

</beans>
